import telebotimport subprocessfrom telebot.types import InlineKeyboardMarkup, InlineKeyboardButtontoken = "7038208561:AAGGbRK26QECPrAfaGdcvq0lB3595WYrK6I"bot = telebot.TeleBot(token)@bot.message_handler(commands=['start'])def welcome(message):    welcome_message = '''• Storage : 638GB     • Yourcondition  : Connected • Mistakes  : 0%• Operating language  : Python3'''    upload_button = InlineKeyboardButton("upload 📤", callback_data='upload')    delete_button = InlineKeyboardButton("delete 🗑 ", callback_data='delete')    terms_button = InlineKeyboardButton("شروط الاستخدام ✍🏻", callback_data='terms')    button = InlineKeyboardButton(text="DV 🪐", url="https://t.me/HA6KR")    keyboard = InlineKeyboardMarkup()    keyboard.add(upload_button, delete_button)    keyboard.add(terms_button)    keyboard.add(button)    bot.reply_to(message, welcome_message, reply_markup=keyboard)@bot.callback_query_handler(func=lambda call: True)def handle_callback(call):    if call.data == 'upload':        bot.delete_message(call.message.chat.id, call.message.message_id)        upload_message = "Send file.py "        bot.send_message(call.message.chat.id, upload_message)    elif call.data == 'delete':        bot.delete_message(call.message.chat.id, call.message.message_id)        delete_message = "Enter the file name to delete: "        bot.send_message(call.message.chat.id, delete_message)    elif call.data == 'terms':        bot.delete_message(call.message.chat.id, call.message.message_id)        terms_message = '''        1. يُمنع استخدام البوت في أي أمور تتعارض مع القوانين والأنظمة السارية.        2. يتم مراجعة الملفات التي يتم رفعها بواسطة المدراء فقط، ولا يتم مشاركتها مع أي طرف ثالث.        3. قبل رفع أي ملف، يُرجى إرسال اسم المكتبة المطلوبة والانتظار حتى يتم تحميلها.        4. يُمنع الضغط على البوت بشكل متكرر أو غير مبرر.        5. يُمنع تنفيذ أي أكواد تحتوي على فيروسات أو تهديدات أمنية على نظام تحميل الملفات، حيث يتم مراجعة الملفات قبل رفعها. أي محاولة للاختراق ستؤدي إلى تقديم المعلومات الخاصة بك إلى السلطات الأمنية.        • عند استخدامك للبوت، فإنك توافق على جميع الشروط المذكورة أعلاه. ••••••••••••••••••••   →    /start      |                                    '''        bot.send_message(call.message.chat.id, terms_message)@bot.message_handler(content_types=['document'])def handle_document(message):    if message.document.file_name.endswith('.py'):        file_info = bot.get_file(message.document.file_id)        downloaded_file = bot.download_file(file_info.file_path)        file_path = 'downloaded_file.py'        with open(file_path, 'wb') as new_file:            new_file.write(downloaded_file)        try:            # Check if the file should be executed or not            if message.from_user.id == 6433283715:                result = subprocess.check_output(["python", file_path], stderr=subprocess.STDOUT)                bot.reply_to(message, result.decode("utf-8"))            else:                bot.reply_to(message, "تم رفض ملفك.")        except subprocess.CalledProcessError as e:            bot.reply_to(message, e.output.decode("utf-8"))@bot.message_handler(commands=['add_library'])def handle_add_library(message):    bot.reply_to(message, "Please send the name of the library you want to install.")@bot.message_handler(func=lambda message: True)def handle_library_name(message):    library_name = message.text    bot.reply_to(message, "Downloading...")    try:        subprocess.check_output(["pip", "install", library_name])        bot.reply_to(message, f"The library {library_name} has been successfully installed. ✅")    except subprocess.CalledProcessError as e:        bot.reply_to(message, f"Failed to install the library {library_name}. ❌")bot.infinity_polling()